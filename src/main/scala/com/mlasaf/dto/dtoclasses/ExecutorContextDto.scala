/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dto 
 
 
case class ExecutorContextDto ( 
     val executorContextId : Long
     , val guid : Long
     , val insertedRowDate : java.util.Date
     , val lastUpdatedDate : java.util.Date
     , val executorHostId : Long
     , val isWorking : Int
     , val properties : String 
     ) extends BaseDto {  
   def tableName : String = { 
   "executorContext"; 
   }  
   def fields : String = { 
   "executorContextId,guid,insertedRowDate,lastUpdatedDate,executorHostId,isWorking,properties"; 
   }  
   def pkFields : String = { 
   "executorContextId"; 
   }  
   def fkFields : String = { 
   "executorHostId"; 
   }  
   def nameField : String = { 
   ""; 
   }  
 def getPk() : Long = {
    executorContextId
  }  
 def getInsertedRowDate() : java.util.Date = {
    insertedRowDate
  }  
 def getLastUpdatedDate() : java.util.Date = {
    lastUpdatedDate
  }  
 def getGuid() : Long = {
    guid
  }  
 def toAnyArray() : Array[Any] = {
    Array(executorContextId,guid,insertedRowDate,lastUpdatedDate,executorHostId,isWorking,properties)
  }  
 def toStringArray() : Array[String] = {
    Array(""+executorContextId,""+guid,""+insertedRowDate,""+lastUpdatedDate,""+executorHostId,""+isWorking,""+properties) 
  } 
   def getFieldValue(name : String) : Any = { 
    val ret = name match { 
    case "executorContextId" => executorContextId  
     case "guid" => guid  
     case "insertedRowDate" => insertedRowDate  
     case "lastUpdatedDate" => lastUpdatedDate  
     case "executorHostId" => executorHostId  
     case "isWorking" => isWorking  
     case "properties" => properties   
    case _ => null 
    } 
    ret 
  } 
   def getFieldTypeName(name : String) : String = { 
    val ret = name match { 
    case "executorContextId" => "Long"  
     case "guid" => "Long"  
     case "insertedRowDate" => "java.util.Date"  
     case "lastUpdatedDate" => "java.util.Date"  
     case "executorHostId" => "Long"  
     case "isWorking" => "Int"  
     case "properties" => "String"   
    case _ => "Object" 
    } 
    ret 
  } 
   def prepareInsert(connection : java.sql.Connection) : java.sql.PreparedStatement = {
     val stat = connection.prepareStatement("insert into executorContext(guid,executorHostId,isWorking,properties) values (?,?,?,?)", java.sql.Statement.RETURN_GENERATED_KEYS);
    stat.setObject(1, guid);
    stat.setObject(2, executorHostId);
    stat.setObject(3, isWorking);
    stat.setObject(4, properties);
    return stat; 
   } 
   def modify(executorHostId : Long, isWorking : Int, properties : String) : ExecutorContextDto = {
    val dtoModified = new ExecutorContextDto(this.executorContextId,this.guid,this.insertedRowDate,new java.util.Date(),executorHostId,isWorking,properties);
    dtoModified
  }
 } 
object ExecutorContextDto { 
  val TABLE_NAME = "executorContext"; 
   val FIELD_executorContextId = "executorContextId";
   val FIELD_guid = "guid";
   val FIELD_insertedRowDate = "insertedRowDate";
   val FIELD_lastUpdatedDate = "lastUpdatedDate";
   val FIELD_executorHostId = "executorHostId";
   val FIELD_isWorking = "isWorking";
   val FIELD_properties = "properties";

  def createNewExecutorContextDto(executorHostId : Long, isWorking : Int, properties : String) : ExecutorContextDto = {  
     val dto = new ExecutorContextDto(0,0,new java.util.Date(),new java.util.Date(),executorHostId,isWorking,properties)   
    dto 
  } 

}

 
