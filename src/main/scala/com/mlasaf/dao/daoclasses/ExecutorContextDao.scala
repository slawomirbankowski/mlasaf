/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class ExecutorContextDao extends DaoBase { 

  def getExecutorContextsList() : List[ExecutorContextDto] = {
   implicit val connection = getConnection();
   val dtos : List[ExecutorContextDto]= SQL("select * from executorContext").as(anorm.Macro.namedParser[ExecutorContextDto].*);
   dtos
  }
  def getExecutorContextsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from executorContext").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getExecutorContextsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from executorContext").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getExecutorContextsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from executorContext").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getExecutorContextFirst() : ExecutorContextDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextDto= SQL("select * from executorContext order by insertedRowDate asc ").as(anorm.Macro.namedParser[ExecutorContextDto].*).head;
   dtos
  }
  def getExecutorContextLast() : ExecutorContextDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextDto= SQL("select * from executorContext order by insertedRowDate desc ").as(anorm.Macro.namedParser[ExecutorContextDto].*).head;
   dtos
  }
  def getExecutorContextByGuid(guid : Long) : ExecutorContextDto = {
   implicit val connection = getConnection();
   val dtos : ExecutorContextDto= SQL("select * from executorContext where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[ExecutorContextDto].single);
   dtos
  }  
 def getExecutorContextByPk(pkColValue : Long) : ExecutorContextDto = { 
   implicit val connection = getConnection();  
   val dto : ExecutorContextDto = SQL("select * from executorContext where executorContextId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[ExecutorContextDto].single);  
   dto  
 }  
 def getExecutorContextMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(executorContextId) as maxId from executorContext ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getExecutorContextByFkExecutorHostId(fkColValue : Long) : List[ExecutorContextDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[ExecutorContextDto] = SQL("select * from executorContext where executorHostId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[ExecutorContextDto].*);  
   dtos  
 }  
 def insertExecutorContextDto(dto : ExecutorContextDto): ExecutorContextDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from executorContext where executorContextId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[ExecutorContextDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertExecutorContextDto(executorHostId : Long, isWorking : Int, properties : String) : ExecutorContextDto = {
    val dto = new ExecutorContextDto(0,0,new Date(),new Date(),executorHostId,isWorking,properties)
    insertExecutorContextDto(dto);   
  }   
  def updateExecutorContextDto(dto : ExecutorContextDto): ExecutorContextDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update executorContext set  lastUpdatedDate = {lastUpdatedDate} ,  executorHostId = {executorHostId} ,  isWorking = {isWorking} ,  properties = {properties}  where  executorContextId = {executorContextId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "executorHostId" -> dto.executorHostId , "isWorking" -> dto.isWorking , "properties" -> dto.properties, "executorContextId" -> dto.executorContextId ).executeInsert() 
     getExecutorContextByPk(dto.executorContextId) 
    } 

} 
