/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class SourceViewTypeDao extends DaoBase { 

  def getSourceViewTypesList() : List[SourceViewTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[SourceViewTypeDto]= SQL("select * from sourceViewType").as(anorm.Macro.namedParser[SourceViewTypeDto].*);
   dtos
  }
  def getSourceViewTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from sourceViewType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getSourceViewTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from sourceViewType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getSourceViewTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from sourceViewType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getSourceViewTypeFirst() : SourceViewTypeDto = {
   implicit val connection = getConnection();
   val dtos : SourceViewTypeDto= SQL("select * from sourceViewType order by insertedRowDate asc ").as(anorm.Macro.namedParser[SourceViewTypeDto].*).head;
   dtos
  }
  def getSourceViewTypeLast() : SourceViewTypeDto = {
   implicit val connection = getConnection();
   val dtos : SourceViewTypeDto= SQL("select * from sourceViewType order by insertedRowDate desc ").as(anorm.Macro.namedParser[SourceViewTypeDto].*).head;
   dtos
  }
  def getSourceViewTypeByGuid(guid : Long) : SourceViewTypeDto = {
   implicit val connection = getConnection();
   val dtos : SourceViewTypeDto= SQL("select * from sourceViewType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[SourceViewTypeDto].single);
   dtos
  }  
 def getSourceViewTypeByPk(pkColValue : Long) : SourceViewTypeDto = { 
   implicit val connection = getConnection();  
   val dto : SourceViewTypeDto = SQL("select * from sourceViewType where sourceViewTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[SourceViewTypeDto].single);  
   dto  
 }  
 def getSourceViewTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(sourceViewTypeId) as maxId from sourceViewType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getSourceViewTypeByName(nameColValue : String) : List[SourceViewTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceViewTypeDto] = SQL("select * from sourceViewType where sourceViewTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[SourceViewTypeDto].*);  
   dtos  
 }  
 def getSourceViewTypeFirstByName(nameColValue : String) : Option[SourceViewTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[SourceViewTypeDto] = SQL("select * from sourceViewType where sourceViewTypeName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[SourceViewTypeDto].*);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertSourceViewTypeDto(dto : SourceViewTypeDto): SourceViewTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from sourceViewType where sourceViewTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[SourceViewTypeDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertSourceViewTypeDto(sourceViewTypeName : String, sourceViewTypeClass : String) : SourceViewTypeDto = {
    val dto = new SourceViewTypeDto(0,0,new Date(),new Date(),sourceViewTypeName,sourceViewTypeClass)
    insertSourceViewTypeDto(dto);   
  }   
  def updateSourceViewTypeDto(dto : SourceViewTypeDto): SourceViewTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update sourceViewType set  lastUpdatedDate = {lastUpdatedDate} ,  sourceViewTypeName = {sourceViewTypeName} ,  sourceViewTypeClass = {sourceViewTypeClass}  where  sourceViewTypeId = {sourceViewTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "sourceViewTypeName" -> dto.sourceViewTypeName , "sourceViewTypeClass" -> dto.sourceViewTypeClass, "sourceViewTypeId" -> dto.sourceViewTypeId ).executeInsert() 
     getSourceViewTypeByPk(dto.sourceViewTypeId) 
    } 

} 
