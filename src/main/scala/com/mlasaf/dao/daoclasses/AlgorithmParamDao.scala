/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmParamDao extends DaoBase { 

  def getAlgorithmParamsList() : List[AlgorithmParamDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmParamDto]= SQL("select * from algorithmParam").as(anorm.Macro.namedParser[AlgorithmParamDto].*);
   dtos
  }
  def getAlgorithmParamsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmParam").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getAlgorithmParamsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getAlgorithmParamsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmParam").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getAlgorithmParamFirst() : AlgorithmParamDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmParamDto= SQL("select * from algorithmParam order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmParamDto].*).head;
   dtos
  }
  def getAlgorithmParamLast() : AlgorithmParamDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmParamDto= SQL("select * from algorithmParam order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmParamDto].*).head;
   dtos
  }
  def getAlgorithmParamByGuid(guid : Long) : AlgorithmParamDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmParamDto= SQL("select * from algorithmParam where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmParamDto].single);
   dtos
  }  
 def getAlgorithmParamByPk(pkColValue : Long) : AlgorithmParamDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmParamDto = SQL("select * from algorithmParam where algorithmParamId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmParamDto].single);  
   dto  
 }  
 def getAlgorithmParamMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmParamId) as maxId from algorithmParam ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getAlgorithmParamByName(nameColValue : String) : List[AlgorithmParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmParamDto] = SQL("select * from algorithmParam where algorithmParamName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmParamDto].*);  
   dtos  
 }  
 def getAlgorithmParamFirstByName(nameColValue : String) : Option[AlgorithmParamDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmParamDto] = SQL("select * from algorithmParam where algorithmParamName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[AlgorithmParamDto].*);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertAlgorithmParamDto(dto : AlgorithmParamDto): AlgorithmParamDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from algorithmParam where algorithmParamId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmParamDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertAlgorithmParamDto(algorithmParamName : String, algorithmParamDescription : String, algorithmParamType : String) : AlgorithmParamDto = {
    val dto = new AlgorithmParamDto(0,0,new Date(),new Date(),algorithmParamName,algorithmParamDescription,algorithmParamType)
    insertAlgorithmParamDto(dto);   
  }   
  def updateAlgorithmParamDto(dto : AlgorithmParamDto): AlgorithmParamDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmParam set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmParamName = {algorithmParamName} ,  algorithmParamDescription = {algorithmParamDescription} ,  algorithmParamType = {algorithmParamType}  where  algorithmParamId = {algorithmParamId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmParamName" -> dto.algorithmParamName , "algorithmParamDescription" -> dto.algorithmParamDescription , "algorithmParamType" -> dto.algorithmParamType, "algorithmParamId" -> dto.algorithmParamId ).executeInsert() 
     getAlgorithmParamByPk(dto.algorithmParamId) 
    } 

} 
