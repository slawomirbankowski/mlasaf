/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorRestDao extends DaoBase { 

  def getVExecutorRestsList() : List[VExecutorRestDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorRestDto]= SQL("select * from vExecutorRest").as(anorm.Macro.namedParser[VExecutorRestDto].*);
   dtos
  }
  def getVExecutorRestsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorRest").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVExecutorRestsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorRest").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVExecutorRestsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorRest").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVExecutorRestFirst() : VExecutorRestDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorRestDto= SQL("select * from vExecutorRest order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorRestDto].*).head;
   dtos
  }
  def getVExecutorRestLast() : VExecutorRestDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorRestDto= SQL("select * from vExecutorRest order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorRestDto].*).head;
   dtos
  }
  def getVExecutorRestByGuid(guid : Long) : VExecutorRestDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorRestDto= SQL("select * from vExecutorRest where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorRestDto].single);
   dtos
  }  
 def getDtosByExecutorRestId(colValue : Long) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorRestId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByRestPort(colValue : Int) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where restPort = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByRestVersion(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where restVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByRestStatus(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where restStatus = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VExecutorRestDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorRestDto] = SQL("select * from vExecutorRest where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorRestDto].*);  
   dtos  
 }  

} 
