/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorStorageViewDao extends DaoBase { 

  def getVExecutorStorageViewsList() : List[VExecutorStorageViewDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageViewDto]= SQL("select * from vExecutorStorageView").as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);
   dtos
  }
  def getVExecutorStorageViewsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorStorageView").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVExecutorStorageViewsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorStorageView").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVExecutorStorageViewsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorStorageView").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVExecutorStorageViewFirst() : VExecutorStorageViewDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageViewDto= SQL("select * from vExecutorStorageView order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorStorageViewDto].*).head;
   dtos
  }
  def getVExecutorStorageViewLast() : VExecutorStorageViewDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageViewDto= SQL("select * from vExecutorStorageView order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorStorageViewDto].*).head;
   dtos
  }
  def getVExecutorStorageViewByGuid(guid : Long) : VExecutorStorageViewDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageViewDto= SQL("select * from vExecutorStorageView where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorStorageViewDto].single);
   dtos
  }  
 def getDtosByExecutorStorageViewId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageSnapshotId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageSnapshotId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownloadId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownloadId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceViewId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByStoragePath(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where storagePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByViewSize(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where viewSize = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByViewRowsCount(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where viewRowsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByIsValid(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where isValid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_guid(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorHostId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_executorStorageTypeId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageDefinition(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageBasePath(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_storageFulllPath(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_isRunning(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorage_portNumber(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorage_portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageSnapshot_executorStorageSnapshotId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageSnapshot_executorStorageSnapshotId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageSnapshot_guid(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageSnapshot_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageSnapshot_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageSnapshot_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageSnapshot_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageSnapshot_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageSnapshot_executorInstanceId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where executorStorageSnapshot_executorInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_sourceDownloadId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_sourceDownloadId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_guid(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_sourceScheduleId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_sourceScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_executorHostId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_executorContextId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_sourceViewId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_retryNumber(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_retryNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_isRunning(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_isFinished(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_isExcecption(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_isExcecption = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceDownload_excecptionDescription(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceDownload_excecptionDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_guid(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_sourceInstanceId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_sourceInstanceId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewTypeId(colValue : Long) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_sourceViewTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewName(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_sourceViewName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_sourceViewDefinition(colValue : String) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_sourceViewDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  
 def getDtosBySourceView_isExisting(colValue : Int) : List[VExecutorStorageViewDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageViewDto] = SQL("select * from vExecutorStorageView where sourceView_isExisting = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageViewDto].*);  
   dtos  
 }  

} 
