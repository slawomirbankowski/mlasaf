/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VAlgorithmOutputDao extends DaoBase { 

  def getVAlgorithmOutputsList() : List[VAlgorithmOutputDto] = {
   implicit val connection = getConnection();
   val dtos : List[VAlgorithmOutputDto]= SQL("select * from vAlgorithmOutput").as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);
   dtos
  }
  def getVAlgorithmOutputsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vAlgorithmOutput").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVAlgorithmOutputsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vAlgorithmOutput").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVAlgorithmOutputsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vAlgorithmOutput").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVAlgorithmOutputFirst() : VAlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmOutputDto= SQL("select * from vAlgorithmOutput order by insertedRowDate asc ").as(anorm.Macro.namedParser[VAlgorithmOutputDto].*).head;
   dtos
  }
  def getVAlgorithmOutputLast() : VAlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmOutputDto= SQL("select * from vAlgorithmOutput order by insertedRowDate desc ").as(anorm.Macro.namedParser[VAlgorithmOutputDto].*).head;
   dtos
  }
  def getVAlgorithmOutputByGuid(guid : Long) : VAlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : VAlgorithmOutputDto= SQL("select * from vAlgorithmOutput where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VAlgorithmOutputDto].single);
   dtos
  }  
 def getDtosByAlgorithmOutputId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmRunId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmRunId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmOutputTypeId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageViewId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByOutputPath(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where outputPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_algorithmOutputTypeId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_algorithmOutputTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_guid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmOutputType_algorithmOutputTypeName(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where algorithmOutputType_algorithmOutputTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_executorStorageViewId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_executorStorageViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_guid(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_insertedRowDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_lastUpdatedDate(colValue : java.util.Date) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_executorStorageSnapshotId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_executorStorageSnapshotId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_executorStorageId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_sourceDownloadId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_sourceDownloadId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_sourceViewId(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_storagePath(colValue : String) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_storagePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_viewSize(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_viewSize = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_viewRowsCount(colValue : Long) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_viewRowsCount = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_isValid(colValue : Int) : List[VAlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VAlgorithmOutputDto] = SQL("select * from vAlgorithmOutput where executorStorageView_isValid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VAlgorithmOutputDto].*);  
   dtos  
 }  

} 
