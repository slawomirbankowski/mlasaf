/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmTypeOutputTypeDao extends DaoBase { 

  def getAlgorithmTypeOutputTypesList() : List[AlgorithmTypeOutputTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmTypeOutputTypeDto]= SQL("select * from algorithmTypeOutputType").as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].*);
   dtos
  }
  def getAlgorithmTypeOutputTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmTypeOutputType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getAlgorithmTypeOutputTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmTypeOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getAlgorithmTypeOutputTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmTypeOutputType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getAlgorithmTypeOutputTypeFirst() : AlgorithmTypeOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmTypeOutputTypeDto= SQL("select * from algorithmTypeOutputType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].*).head;
   dtos
  }
  def getAlgorithmTypeOutputTypeLast() : AlgorithmTypeOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmTypeOutputTypeDto= SQL("select * from algorithmTypeOutputType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].*).head;
   dtos
  }
  def getAlgorithmTypeOutputTypeByGuid(guid : Long) : AlgorithmTypeOutputTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmTypeOutputTypeDto= SQL("select * from algorithmTypeOutputType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].single);
   dtos
  }  
 def getAlgorithmTypeOutputTypeByPk(pkColValue : Long) : AlgorithmTypeOutputTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmTypeOutputTypeDto = SQL("select * from algorithmTypeOutputType where algorithmTypeOutputTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].single);  
   dto  
 }  
 def getAlgorithmTypeOutputTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmTypeOutputTypeId) as maxId from algorithmTypeOutputType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getAlgorithmTypeOutputTypeByFkAlgorithmOutputTypeId(fkColValue : Long) : List[AlgorithmTypeOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmTypeOutputTypeDto] = SQL("select * from algorithmTypeOutputType where algorithmOutputTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].*);  
   dtos  
 }  
 def getAlgorithmTypeOutputTypeByFkAlgorithmTypeVersionId(fkColValue : Long) : List[AlgorithmTypeOutputTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmTypeOutputTypeDto] = SQL("select * from algorithmTypeOutputType where algorithmTypeVersionId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].*);  
   dtos  
 }  
 def insertAlgorithmTypeOutputTypeDto(dto : AlgorithmTypeOutputTypeDto): AlgorithmTypeOutputTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from algorithmTypeOutputType where algorithmTypeOutputTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmTypeOutputTypeDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertAlgorithmTypeOutputTypeDto(algorithmTypeVersionId : Long, algorithmOutputTypeId : Long, isMandatory : Int) : AlgorithmTypeOutputTypeDto = {
    val dto = new AlgorithmTypeOutputTypeDto(0,0,new Date(),new Date(),algorithmTypeVersionId,algorithmOutputTypeId,isMandatory)
    insertAlgorithmTypeOutputTypeDto(dto);   
  }   
  def updateAlgorithmTypeOutputTypeDto(dto : AlgorithmTypeOutputTypeDto): AlgorithmTypeOutputTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmTypeOutputType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmTypeVersionId = {algorithmTypeVersionId} ,  algorithmOutputTypeId = {algorithmOutputTypeId} ,  isMandatory = {isMandatory}  where  algorithmTypeOutputTypeId = {algorithmTypeOutputTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmTypeVersionId" -> dto.algorithmTypeVersionId , "algorithmOutputTypeId" -> dto.algorithmOutputTypeId , "isMandatory" -> dto.isMandatory, "algorithmTypeOutputTypeId" -> dto.algorithmTypeOutputTypeId ).executeInsert() 
     getAlgorithmTypeOutputTypeByPk(dto.algorithmTypeOutputTypeId) 
    } 

} 
