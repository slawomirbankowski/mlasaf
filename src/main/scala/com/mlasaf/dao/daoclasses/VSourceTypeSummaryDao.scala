/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceTypeSummaryDao extends DaoBase { 

  def getVSourceTypeSummarysList() : List[VSourceTypeSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceTypeSummaryDto]= SQL("select * from vSourceTypeSummary").as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);
   dtos
  }
  def getVSourceTypeSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceTypeSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVSourceTypeSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVSourceTypeSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceTypeSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVSourceTypeSummaryFirst() : VSourceTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceTypeSummaryDto= SQL("select * from vSourceTypeSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*).head;
   dtos
  }
  def getVSourceTypeSummaryLast() : VSourceTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceTypeSummaryDto= SQL("select * from vSourceTypeSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*).head;
   dtos
  }
  def getVSourceTypeSummaryByGuid(guid : Long) : VSourceTypeSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceTypeSummaryDto= SQL("select * from vSourceTypeSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].single);
   dtos
  }  
 def getDtosBySourceTypeId(colValue : Long) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where sourceTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceTypeName(colValue : String) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where sourceTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceTypeClass(colValue : String) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where sourceTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceInstance_count(colValue : Int) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where sourceInstance_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceTypeParam_count(colValue : Int) : List[VSourceTypeSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceTypeSummaryDto] = SQL("select * from vSourceTypeSummary where sourceTypeParam_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceTypeSummaryDto].*);  
   dtos  
 }  

} 
