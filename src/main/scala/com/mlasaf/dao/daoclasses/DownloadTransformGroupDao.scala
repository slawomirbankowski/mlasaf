/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class DownloadTransformGroupDao extends DaoBase { 

  def getDownloadTransformGroupsList() : List[DownloadTransformGroupDto] = {
   implicit val connection = getConnection();
   val dtos : List[DownloadTransformGroupDto]= SQL("select * from downloadTransformGroup").as(anorm.Macro.namedParser[DownloadTransformGroupDto].*);
   dtos
  }
  def getDownloadTransformGroupsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from downloadTransformGroup").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getDownloadTransformGroupsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from downloadTransformGroup").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getDownloadTransformGroupsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from downloadTransformGroup").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getDownloadTransformGroupFirst() : DownloadTransformGroupDto = {
   implicit val connection = getConnection();
   val dtos : DownloadTransformGroupDto= SQL("select * from downloadTransformGroup order by insertedRowDate asc ").as(anorm.Macro.namedParser[DownloadTransformGroupDto].*).head;
   dtos
  }
  def getDownloadTransformGroupLast() : DownloadTransformGroupDto = {
   implicit val connection = getConnection();
   val dtos : DownloadTransformGroupDto= SQL("select * from downloadTransformGroup order by insertedRowDate desc ").as(anorm.Macro.namedParser[DownloadTransformGroupDto].*).head;
   dtos
  }
  def getDownloadTransformGroupByGuid(guid : Long) : DownloadTransformGroupDto = {
   implicit val connection = getConnection();
   val dtos : DownloadTransformGroupDto= SQL("select * from downloadTransformGroup where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[DownloadTransformGroupDto].single);
   dtos
  }  
 def getDownloadTransformGroupByPk(pkColValue : Long) : DownloadTransformGroupDto = { 
   implicit val connection = getConnection();  
   val dto : DownloadTransformGroupDto = SQL("select * from downloadTransformGroup where downloadTransformGroupId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[DownloadTransformGroupDto].single);  
   dto  
 }  
 def getDownloadTransformGroupMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(downloadTransformGroupId) as maxId from downloadTransformGroup ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getDownloadTransformGroupByName(nameColValue : String) : List[DownloadTransformGroupDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[DownloadTransformGroupDto] = SQL("select * from downloadTransformGroup where downloadTransformGroupName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[DownloadTransformGroupDto].*);  
   dtos  
 }  
 def getDownloadTransformGroupFirstByName(nameColValue : String) : Option[DownloadTransformGroupDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[DownloadTransformGroupDto] = SQL("select * from downloadTransformGroup where downloadTransformGroupName = {nameColValue} ").on("nameColValue" -> nameColValue).as(anorm.Macro.namedParser[DownloadTransformGroupDto].*);  
   if (dtos.size > 0) Some(dtos.head) else None  
 }  
 def insertDownloadTransformGroupDto(dto : DownloadTransformGroupDto): DownloadTransformGroupDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from downloadTransformGroup where downloadTransformGroupId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[DownloadTransformGroupDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertDownloadTransformGroupDto(downloadTransformGroupName : String) : DownloadTransformGroupDto = {
    val dto = new DownloadTransformGroupDto(0,0,new Date(),new Date(),downloadTransformGroupName)
    insertDownloadTransformGroupDto(dto);   
  }   
  def updateDownloadTransformGroupDto(dto : DownloadTransformGroupDto): DownloadTransformGroupDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update downloadTransformGroup set  lastUpdatedDate = {lastUpdatedDate} ,  downloadTransformGroupName = {downloadTransformGroupName}  where  downloadTransformGroupId = {downloadTransformGroupId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "downloadTransformGroupName" -> dto.downloadTransformGroupName, "downloadTransformGroupId" -> dto.downloadTransformGroupId ).executeInsert() 
     getDownloadTransformGroupByPk(dto.downloadTransformGroupId) 
    } 

} 
