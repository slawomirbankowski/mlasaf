/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorStorageSummaryDao extends DaoBase { 

  def getVExecutorStorageSummarysList() : List[VExecutorStorageSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageSummaryDto]= SQL("select * from vExecutorStorageSummary").as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);
   dtos
  }
  def getVExecutorStorageSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorStorageSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVExecutorStorageSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorStorageSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVExecutorStorageSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorStorageSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVExecutorStorageSummaryFirst() : VExecutorStorageSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageSummaryDto= SQL("select * from vExecutorStorageSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*).head;
   dtos
  }
  def getVExecutorStorageSummaryLast() : VExecutorStorageSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageSummaryDto= SQL("select * from vExecutorStorageSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*).head;
   dtos
  }
  def getVExecutorStorageSummaryByGuid(guid : Long) : VExecutorStorageSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageSummaryDto= SQL("select * from vExecutorStorageSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].single);
   dtos
  }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageTypeId(colValue : Long) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByStorageDefinition(colValue : String) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByStorageBasePath(colValue : String) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByStorageFulllPath(colValue : String) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByPortNumber(colValue : Int) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByAlgorithmRun_count(colValue : Int) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where algorithmRun_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceSchedule_count(colValue : Int) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where sourceSchedule_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_count(colValue : Int) : List[VExecutorStorageSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageSummaryDto] = SQL("select * from vExecutorStorageSummary where executorStorageView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageSummaryDto].*);  
   dtos  
 }  

} 
