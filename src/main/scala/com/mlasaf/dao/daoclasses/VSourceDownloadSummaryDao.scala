/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VSourceDownloadSummaryDao extends DaoBase { 

  def getVSourceDownloadSummarysList() : List[VSourceDownloadSummaryDto] = {
   implicit val connection = getConnection();
   val dtos : List[VSourceDownloadSummaryDto]= SQL("select * from vSourceDownloadSummary").as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);
   dtos
  }
  def getVSourceDownloadSummarysCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vSourceDownloadSummary").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVSourceDownloadSummarysLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vSourceDownloadSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVSourceDownloadSummarysLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vSourceDownloadSummary").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVSourceDownloadSummaryFirst() : VSourceDownloadSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceDownloadSummaryDto= SQL("select * from vSourceDownloadSummary order by insertedRowDate asc ").as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*).head;
   dtos
  }
  def getVSourceDownloadSummaryLast() : VSourceDownloadSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceDownloadSummaryDto= SQL("select * from vSourceDownloadSummary order by insertedRowDate desc ").as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*).head;
   dtos
  }
  def getVSourceDownloadSummaryByGuid(guid : Long) : VSourceDownloadSummaryDto = {
   implicit val connection = getConnection();
   val dtos : VSourceDownloadSummaryDto= SQL("select * from vSourceDownloadSummary where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].single);
   dtos
  }  
 def getDtosBySourceDownloadId(colValue : Long) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where sourceDownloadId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceScheduleId(colValue : Long) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where sourceScheduleId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByExecutorContextId(colValue : Long) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where executorContextId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceViewId(colValue : Long) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where sourceViewId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByRetryNumber(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where retryNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByIsFinished(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where isFinished = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByIsExcecption(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where isExcecption = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByExcecptionDescription(colValue : String) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where excecptionDescription = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceDownloadStat_count(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where sourceDownloadStat_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosBySourceDownloadStatColumn_count(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where sourceDownloadStatColumn_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageView_count(colValue : Int) : List[VSourceDownloadSummaryDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VSourceDownloadSummaryDto] = SQL("select * from vSourceDownloadSummary where executorStorageView_count = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VSourceDownloadSummaryDto].*);  
   dtos  
 }  

} 
