/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class DownloadTransformExecutorStorageDao extends DaoBase { 

  def getDownloadTransformExecutorStoragesList() : List[DownloadTransformExecutorStorageDto] = {
   implicit val connection = getConnection();
   val dtos : List[DownloadTransformExecutorStorageDto]= SQL("select * from downloadTransformExecutorStorage").as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].*);
   dtos
  }
  def getDownloadTransformExecutorStoragesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from downloadTransformExecutorStorage").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getDownloadTransformExecutorStoragesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from downloadTransformExecutorStorage").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getDownloadTransformExecutorStoragesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from downloadTransformExecutorStorage").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getDownloadTransformExecutorStorageFirst() : DownloadTransformExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : DownloadTransformExecutorStorageDto= SQL("select * from downloadTransformExecutorStorage order by insertedRowDate asc ").as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].*).head;
   dtos
  }
  def getDownloadTransformExecutorStorageLast() : DownloadTransformExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : DownloadTransformExecutorStorageDto= SQL("select * from downloadTransformExecutorStorage order by insertedRowDate desc ").as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].*).head;
   dtos
  }
  def getDownloadTransformExecutorStorageByGuid(guid : Long) : DownloadTransformExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : DownloadTransformExecutorStorageDto= SQL("select * from downloadTransformExecutorStorage where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].single);
   dtos
  }  
 def getDownloadTransformExecutorStorageByPk(pkColValue : Long) : DownloadTransformExecutorStorageDto = { 
   implicit val connection = getConnection();  
   val dto : DownloadTransformExecutorStorageDto = SQL("select * from downloadTransformExecutorStorage where downloadTransformExecutorStorageId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].single);  
   dto  
 }  
 def getDownloadTransformExecutorStorageMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(downloadTransformExecutorStorageId) as maxId from downloadTransformExecutorStorage ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getDownloadTransformExecutorStorageByFkDownloadTransformGroupId(fkColValue : Long) : List[DownloadTransformExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[DownloadTransformExecutorStorageDto] = SQL("select * from downloadTransformExecutorStorage where downloadTransformGroupId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].*);  
   dtos  
 }  
 def getDownloadTransformExecutorStorageByFkExecutorStorageViewId(fkColValue : Long) : List[DownloadTransformExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[DownloadTransformExecutorStorageDto] = SQL("select * from downloadTransformExecutorStorage where executorStorageViewId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].*);  
   dtos  
 }  
 def insertDownloadTransformExecutorStorageDto(dto : DownloadTransformExecutorStorageDto): DownloadTransformExecutorStorageDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from downloadTransformExecutorStorage where downloadTransformExecutorStorageId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[DownloadTransformExecutorStorageDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertDownloadTransformExecutorStorageDto(downloadTransformGroupId : Long, executorStorageViewId : Long) : DownloadTransformExecutorStorageDto = {
    val dto = new DownloadTransformExecutorStorageDto(0,0,new Date(),new Date(),downloadTransformGroupId,executorStorageViewId)
    insertDownloadTransformExecutorStorageDto(dto);   
  }   
  def updateDownloadTransformExecutorStorageDto(dto : DownloadTransformExecutorStorageDto): DownloadTransformExecutorStorageDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update downloadTransformExecutorStorage set  lastUpdatedDate = {lastUpdatedDate} ,  downloadTransformGroupId = {downloadTransformGroupId} ,  executorStorageViewId = {executorStorageViewId}  where  downloadTransformExecutorStorageId = {downloadTransformExecutorStorageId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "downloadTransformGroupId" -> dto.downloadTransformGroupId , "executorStorageViewId" -> dto.executorStorageViewId, "downloadTransformExecutorStorageId" -> dto.downloadTransformExecutorStorageId ).executeInsert() 
     getDownloadTransformExecutorStorageByPk(dto.downloadTransformExecutorStorageId) 
    } 

} 
