/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VDownloadTransformDao extends DaoBase { 

  def getVDownloadTransformsList() : List[VDownloadTransformDto] = {
   implicit val connection = getConnection();
   val dtos : List[VDownloadTransformDto]= SQL("select * from vDownloadTransform").as(anorm.Macro.namedParser[VDownloadTransformDto].*);
   dtos
  }
  def getVDownloadTransformsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vDownloadTransform").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVDownloadTransformsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vDownloadTransform").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVDownloadTransformsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vDownloadTransform").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVDownloadTransformFirst() : VDownloadTransformDto = {
   implicit val connection = getConnection();
   val dtos : VDownloadTransformDto= SQL("select * from vDownloadTransform order by insertedRowDate asc ").as(anorm.Macro.namedParser[VDownloadTransformDto].*).head;
   dtos
  }
  def getVDownloadTransformLast() : VDownloadTransformDto = {
   implicit val connection = getConnection();
   val dtos : VDownloadTransformDto= SQL("select * from vDownloadTransform order by insertedRowDate desc ").as(anorm.Macro.namedParser[VDownloadTransformDto].*).head;
   dtos
  }
  def getVDownloadTransformByGuid(guid : Long) : VDownloadTransformDto = {
   implicit val connection = getConnection();
   val dtos : VDownloadTransformDto= SQL("select * from vDownloadTransform where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VDownloadTransformDto].single);
   dtos
  }  
 def getDtosByDownloadTransformId(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformTypeId(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformGroupId(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformGroupId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformDefinition(colValue : String) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_downloadTransformGroupId(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformGroup_downloadTransformGroupId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_guid(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformGroup_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_insertedRowDate(colValue : java.util.Date) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformGroup_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_lastUpdatedDate(colValue : java.util.Date) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformGroup_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformGroup_downloadTransformGroupName(colValue : String) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformGroup_downloadTransformGroupName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformType_downloadTransformTypeId(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformType_downloadTransformTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformType_guid(colValue : Long) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformType_insertedRowDate(colValue : java.util.Date) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformType_lastUpdatedDate(colValue : java.util.Date) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  
 def getDtosByDownloadTransformType_downloadTransformTypeName(colValue : String) : List[VDownloadTransformDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VDownloadTransformDto] = SQL("select * from vDownloadTransform where downloadTransformType_downloadTransformTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VDownloadTransformDto].*);  
   dtos  
 }  

} 
