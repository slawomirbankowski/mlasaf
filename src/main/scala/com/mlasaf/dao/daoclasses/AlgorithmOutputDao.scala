/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmOutputDao extends DaoBase { 

  def getAlgorithmOutputsList() : List[AlgorithmOutputDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmOutputDto]= SQL("select * from algorithmOutput").as(anorm.Macro.namedParser[AlgorithmOutputDto].*);
   dtos
  }
  def getAlgorithmOutputsCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmOutput").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getAlgorithmOutputsLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmOutput").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getAlgorithmOutputsLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmOutput").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getAlgorithmOutputFirst() : AlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmOutputDto= SQL("select * from algorithmOutput order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmOutputDto].*).head;
   dtos
  }
  def getAlgorithmOutputLast() : AlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmOutputDto= SQL("select * from algorithmOutput order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmOutputDto].*).head;
   dtos
  }
  def getAlgorithmOutputByGuid(guid : Long) : AlgorithmOutputDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmOutputDto= SQL("select * from algorithmOutput where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmOutputDto].single);
   dtos
  }  
 def getAlgorithmOutputByPk(pkColValue : Long) : AlgorithmOutputDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmOutputDto = SQL("select * from algorithmOutput where algorithmOutputId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmOutputDto].single);  
   dto  
 }  
 def getAlgorithmOutputMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmOutputId) as maxId from algorithmOutput ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getAlgorithmOutputByFkAlgorithmOutputTypeId(fkColValue : Long) : List[AlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmOutputDto] = SQL("select * from algorithmOutput where algorithmOutputTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmOutputDto].*);  
   dtos  
 }  
 def getAlgorithmOutputByFkAlgorithmRunId(fkColValue : Long) : List[AlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmOutputDto] = SQL("select * from algorithmOutput where algorithmRunId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmOutputDto].*);  
   dtos  
 }  
 def getAlgorithmOutputByFkExecutorStorageViewId(fkColValue : Long) : List[AlgorithmOutputDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmOutputDto] = SQL("select * from algorithmOutput where executorStorageViewId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmOutputDto].*);  
   dtos  
 }  
 def insertAlgorithmOutputDto(dto : AlgorithmOutputDto): AlgorithmOutputDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from algorithmOutput where algorithmOutputId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmOutputDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertAlgorithmOutputDto(algorithmRunId : Long, algorithmOutputTypeId : Long, executorStorageViewId : Long, outputPath : String) : AlgorithmOutputDto = {
    val dto = new AlgorithmOutputDto(0,0,new Date(),new Date(),algorithmRunId,algorithmOutputTypeId,executorStorageViewId,outputPath)
    insertAlgorithmOutputDto(dto);   
  }   
  def updateAlgorithmOutputDto(dto : AlgorithmOutputDto): AlgorithmOutputDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmOutput set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmRunId = {algorithmRunId} ,  algorithmOutputTypeId = {algorithmOutputTypeId} ,  executorStorageViewId = {executorStorageViewId} ,  outputPath = {outputPath}  where  algorithmOutputId = {algorithmOutputId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmRunId" -> dto.algorithmRunId , "algorithmOutputTypeId" -> dto.algorithmOutputTypeId , "executorStorageViewId" -> dto.executorStorageViewId , "outputPath" -> dto.outputPath, "algorithmOutputId" -> dto.algorithmOutputId ).executeInsert() 
     getAlgorithmOutputByPk(dto.algorithmOutputId) 
    } 

} 
