/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class VExecutorStorageDao extends DaoBase { 

  def getVExecutorStoragesList() : List[VExecutorStorageDto] = {
   implicit val connection = getConnection();
   val dtos : List[VExecutorStorageDto]= SQL("select * from vExecutorStorage").as(anorm.Macro.namedParser[VExecutorStorageDto].*);
   dtos
  }
  def getVExecutorStoragesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from vExecutorStorage").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getVExecutorStoragesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from vExecutorStorage").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getVExecutorStoragesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from vExecutorStorage").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getVExecutorStorageFirst() : VExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageDto= SQL("select * from vExecutorStorage order by insertedRowDate asc ").as(anorm.Macro.namedParser[VExecutorStorageDto].*).head;
   dtos
  }
  def getVExecutorStorageLast() : VExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageDto= SQL("select * from vExecutorStorage order by insertedRowDate desc ").as(anorm.Macro.namedParser[VExecutorStorageDto].*).head;
   dtos
  }
  def getVExecutorStorageByGuid(guid : Long) : VExecutorStorageDto = {
   implicit val connection = getConnection();
   val dtos : VExecutorStorageDto= SQL("select * from vExecutorStorage where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[VExecutorStorageDto].single);
   dtos
  }  
 def getDtosByExecutorStorageId(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByGuid(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByInsertedRowDate(colValue : java.util.Date) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByLastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHostId(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageTypeId(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByStorageDefinition(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where storageDefinition = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByStorageBasePath(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where storageBasePath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByStorageFulllPath(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where storageFulllPath = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByIsRunning(colValue : Int) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where isRunning = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByPortNumber(colValue : Int) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where portNumber = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_executorHostId(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_executorHostId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_guid(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostName(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_hostName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostIp(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_hostIp = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostDomain(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_hostDomain = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsType(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_hostOsType = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_hostOsVersion(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_hostOsVersion = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorHost_isWorking(colValue : Int) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorHost_isWorking = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageType_executorStorageTypeId(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageType_executorStorageTypeId = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageType_guid(colValue : Long) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageType_guid = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageType_insertedRowDate(colValue : java.util.Date) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageType_insertedRowDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageType_lastUpdatedDate(colValue : java.util.Date) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageType_lastUpdatedDate = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageType_executorStorageTypeName(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageType_executorStorageTypeName = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  
 def getDtosByExecutorStorageType_executorStorageTypeClass(colValue : String) : List[VExecutorStorageDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[VExecutorStorageDto] = SQL("select * from vExecutorStorage where executorStorageType_executorStorageTypeClass = {colValue} ").on("colValue" -> colValue).as(anorm.Macro.namedParser[VExecutorStorageDto].*);  
   dtos  
 }  

} 
