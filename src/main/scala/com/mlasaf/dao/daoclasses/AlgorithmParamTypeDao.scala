/*
  Author(s): Slawomir Bankowski
  Project: mlasaf
  AUTOGENERATED CODE
*/
package com.mlasaf.dao

import anorm.{SQL, SqlParser}
import com.mlasaf.dto._
import java.util.Date


 class AlgorithmParamTypeDao extends DaoBase { 

  def getAlgorithmParamTypesList() : List[AlgorithmParamTypeDto] = {
   implicit val connection = getConnection();
   val dtos : List[AlgorithmParamTypeDto]= SQL("select * from algorithmParamType").as(anorm.Macro.namedParser[AlgorithmParamTypeDto].*);
   dtos
  }
  def getAlgorithmParamTypesCount() : Long = {
   implicit val connection = getConnection();
   val cnt : Long = SQL("select count(*) as cnt from algorithmParamType").executeQuery()(connection).as[Long](SqlParser.long("cnt").single)(connection);;
   cnt
  }
  def getAlgorithmParamTypesLastInsertDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(insertedRowDate) as lastDate from algorithmParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastDate").single)(connection);;
   ld
  }
  def getAlgorithmParamTypesLastUpdatedDate() : java.util.Date = {
   implicit val connection = getConnection();
   val ld : java.util.Date = SQL("select max(lastUpdatedDate) as lastUpdatedDate from algorithmParamType").executeQuery()(connection).as[java.util.Date](SqlParser.date("lastUpdatedDate").single)(connection);;
   ld
  }
  def getAlgorithmParamTypeFirst() : AlgorithmParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmParamTypeDto= SQL("select * from algorithmParamType order by insertedRowDate asc ").as(anorm.Macro.namedParser[AlgorithmParamTypeDto].*).head;
   dtos
  }
  def getAlgorithmParamTypeLast() : AlgorithmParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmParamTypeDto= SQL("select * from algorithmParamType order by insertedRowDate desc ").as(anorm.Macro.namedParser[AlgorithmParamTypeDto].*).head;
   dtos
  }
  def getAlgorithmParamTypeByGuid(guid : Long) : AlgorithmParamTypeDto = {
   implicit val connection = getConnection();
   val dtos : AlgorithmParamTypeDto= SQL("select * from algorithmParamType where guid = {guid} ").on("guid" -> guid).as(anorm.Macro.namedParser[AlgorithmParamTypeDto].single);
   dtos
  }  
 def getAlgorithmParamTypeByPk(pkColValue : Long) : AlgorithmParamTypeDto = { 
   implicit val connection = getConnection();  
   val dto : AlgorithmParamTypeDto = SQL("select * from algorithmParamType where algorithmParamTypeId = {pkColValue} ").on("pkColValue" -> pkColValue).as(anorm.Macro.namedParser[AlgorithmParamTypeDto].single);  
   dto  
 }  
 def getAlgorithmParamTypeMaxId() : Long = { 
   implicit val connection = getConnection();  
   val maxid : Long = SQL("select max(algorithmParamTypeId) as maxId from algorithmParamType ").executeQuery()(connection).as[Long](SqlParser.long("maxId").single)(connection);;  
   maxid  
 }  
 def getAlgorithmParamTypeByFkAlgorithmParamId(fkColValue : Long) : List[AlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmParamTypeDto] = SQL("select * from algorithmParamType where algorithmParamId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmParamTypeDto].*);  
   dtos  
 }  
 def getAlgorithmParamTypeByFkAlgorithmTypeId(fkColValue : Long) : List[AlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmParamTypeDto] = SQL("select * from algorithmParamType where algorithmTypeId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmParamTypeDto].*);  
   dtos  
 }  
 def getAlgorithmParamTypeByFkAlgorithmTypeVersionId(fkColValue : Long) : List[AlgorithmParamTypeDto] = { 
   implicit val connection = getConnection();  
   val dtos : List[AlgorithmParamTypeDto] = SQL("select * from algorithmParamType where algorithmTypeVersionId = {fkColValue} ").on("fkColValue" -> fkColValue).as(anorm.Macro.namedParser[AlgorithmParamTypeDto].*);  
   dtos  
 }  
 def insertAlgorithmParamTypeDto(dto : AlgorithmParamTypeDto): AlgorithmParamTypeDto = { 
    implicit val connection = getConnection(); 
    val stat = dto.prepareInsert(getConnection()); 
    val resCnt = stat.executeUpdate(); 
    val rs = stat.getGeneratedKeys(); 
    if (rs.next()) { 
      val pkValue = rs.getLong(1); 
      SQL("select * from algorithmParamType where algorithmParamTypeId = {pkValue} ").on("pkValue" -> pkValue).as(anorm.Macro.namedParser[AlgorithmParamTypeDto].single); 
    } else { 
      null; 
    } 
 } 
  def createAndInsertAlgorithmParamTypeDto(algorithmParamId : Long, algorithmTypeId : Long, algorithmTypeVersionId : Long) : AlgorithmParamTypeDto = {
    val dto = new AlgorithmParamTypeDto(0,0,new Date(),new Date(),algorithmParamId,algorithmTypeId,algorithmTypeVersionId)
    insertAlgorithmParamTypeDto(dto);   
  }   
  def updateAlgorithmParamTypeDto(dto : AlgorithmParamTypeDto): AlgorithmParamTypeDto = {  
    implicit val connection = getConnection();  
      val resCnt = SQL("update algorithmParamType set  lastUpdatedDate = {lastUpdatedDate} ,  algorithmParamId = {algorithmParamId} ,  algorithmTypeId = {algorithmTypeId} ,  algorithmTypeVersionId = {algorithmTypeVersionId}  where  algorithmParamTypeId = {algorithmParamTypeId}  ")
      .on("lastUpdatedDate" -> dto.lastUpdatedDate , "algorithmParamId" -> dto.algorithmParamId , "algorithmTypeId" -> dto.algorithmTypeId , "algorithmTypeVersionId" -> dto.algorithmTypeVersionId, "algorithmParamTypeId" -> dto.algorithmParamTypeId ).executeInsert() 
     getAlgorithmParamTypeByPk(dto.algorithmParamTypeId) 
    } 

} 
